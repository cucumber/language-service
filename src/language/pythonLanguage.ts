import { StringOrRegExp } from '@cucumber/cucumber-expressions'

import { Language, TreeSitterSyntaxNode } from './types.js'

export const pythonLanguage: Language = {
  toParameterTypeName() {
    throw new Error('Unsupported operation')
  },
  toParameterTypeRegExps() {
    throw new Error('Unsupported operation')
  },
  toStepDefinitionExpression(node: TreeSitterSyntaxNode): StringOrRegExp {
    const s = node.text.slice(1, -1)
    // remove python named capture groups.
    // TODO: This should be temporary. Python supports
    // a wider array of regex features than javascript
    // a singular way of communicating regex consistent
    // across languages is necessary
    const specialChars = /[^$<>]/
    if (specialChars.test(s)) {
      const replaced = s.split('?P').join('')
      return new RegExp(replaced)
    } else {
      return s
    }
  },
  defineParameterTypeQueries: [],
  defineStepDefinitionQueries: [
    `
(decorated_definition
    (decorator
        (call
            function: (identifier) @method
            arguments: (argument_list (string) @expression)
        )
    )
    (#match? @method "(given|when|then)")
) @root
`,
  ],

  snippetParameters: {
    int: { type: 'int' },
    float: { type: 'float' },
    word: { type: 'str' },
    string: { type: 'str' },
    double: { type: 'double' },
    bigdecimal: { type: 'decimal' },
    byte: { type: 'byte' },
    short: { type: 'short' },
    long: { type: 'long' },
    biginteger: { type: 'int' },
    '': { type: 'Object', name: 'arg' },
  },

  defaultSnippetTemplate: `
  @{{ #lowercase }}{{ keyword }}{{ /lowercase }}('{{ expression }}')
  def step_{{ #lowercase }}{{ keyword }}{{ /lowercase }}({{ #parameters }}{{ #seenParameter }}, {{ /seenParameter }}{{ name }}{{ /parameters }}) :
      # This was autogenerated using cucumber syntax.
      # Please convert to use regular expressions, as Behave does not currently support Cucumber Expressions`,
}
